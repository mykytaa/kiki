# trader_notes_full.py
# –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Ç—Ç—é–Ω–µ–Ω–Ω–∞—è:
# - –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ ‚Üí –ö–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (2 —à–∞–≥–∞)
# - oEmbed title + –ø—Ä–µ–≤—å—é YouTube (–±–µ–∑ API-–∫–ª—é—á–∞)
# - Quill-—Ä–µ–¥–∞–∫—Ç–æ—Ä (—à–∏—Ä–æ–∫–∏–µ, –≤—ã—Å–æ–∫–∏–µ) –≤ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–∞—Ö
# - –í–ª–æ–∂–µ–Ω–∏—è –∫ –∑–∞–º–µ—Ç–∫–∞–º (attachments/{note_id})
# - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫ –±–ª–æ–∫–∞–º–∏ (—ç–∫—Å–ø–∞–Ω–¥–µ—Ä—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏)
# - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤–∏–¥–µ–æ: —Ñ–∏–ª—å—Ç—Ä—ã, –ø—Ä–∞–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏–µ (—Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏), —ç–∫—Å–ø–æ—Ä—Ç CSV
# - –î–∞—à–±–æ—Ä–¥: –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ + —Ç–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
# - –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç CSV (–≤–∏–¥–µ–æ –∏ –∑–∞–º–µ—Ç–∫–∏)
# - –§–∏–∫—Å—ã Streamlit: session_state –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ submit-–∫–Ω–æ–ø–∫–∏

import os, sqlite3, pathlib, shutil
from datetime import datetime, date
from typing import Dict, Any, List, Optional
import pandas as pd
import streamlit as st
import requests
from urllib.parse import urlparse, parse_qs
from streamlit_quill import st_quill

APP_TITLE = "üìö Trader Notes ‚Äî Full"
APP_DIR   = os.path.dirname(__file__)
DB_PATH   = os.path.join(APP_DIR, "notes_hub.db")
HERO_PATH = os.path.join(APP_DIR, "hero.jpg")
ATT_DIR   = os.path.join(APP_DIR, "attachments")
os.makedirs(ATT_DIR, exist_ok=True)

STATUS = ["–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ","–í –ø—Ä–æ—Ü–µ—Å—Å–µ","–ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ"]
IMP    = ["üü¢ –ù–∏–∑–∫–∞—è","üü° –°—Ä–µ–¥–Ω—è—è","üî¥ –í—ã—Å–æ–∫–∞—è"]
SETUPS = ["","BOS","CHOCH","OB","iFVG","FVG","Sweep","Liquidity grab","Break&Retest","Other"]
INSTR  = ["","EURUSD","XAUUSD","GBPUSD","USDJPY","GER40","US500","BTCUSD","ETHUSD"]

# -------------------- Styling --------------------
def css():
    st.markdown("""
    <style>
      .wrap{max-width:1180px;margin:0 auto}
      .card{background:#0f172a0A;border:1px solid #e5e7eb33;border-radius:16px;padding:18px 20px;margin:10px 0 18px;box-shadow:0 2px 14px rgba(0,0,0,0.05)}
      .title-xl{font-size:34px;font-weight:800;margin:6px 0}
      .subtitle{color:#6b7280;font-size:14px;margin:0 0 10px}
      .stButton>button{border-radius:10px;padding:10px 16px}
      /* –í—ã—Å–æ–∫–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã Quill */
      .stQuill .ql-container{min-height:320px !important}
      .stQuill .ql-editor{min-height:280px !important}
    </style>
    """, unsafe_allow_html=True)

# -------------------- YouTube helpers --------------------
def normalize_youtube_url(url: str) -> str:
    try:
        u = urlparse(url)
        host = (u.hostname or "").lower()
        if "youtu.be" in host:
            vid = u.path.lstrip("/")
            return f"https://www.youtube.com/watch?v={vid}"
        if "youtube.com" in host:
            if u.path.startswith("/shorts/"):
                vid = u.path.split("/shorts/")[1].split("/")[0]
                return f"https://www.youtube.com/watch?v={vid}"
            if host.startswith("m."):
                return url.replace("m.youtube.com", "www.youtube.com")
        return url
    except:
        return url

def youtube_id(url: str) -> Optional[str]:
    try:
        u = urlparse(normalize_youtube_url(url))
        if u.hostname and "youtube.com" in u.hostname:
            v = parse_qs(u.query).get("v", [""])[0]
            return v or None
        if u.hostname and "youtu.be" in u.hostname:
            return u.path.lstrip("/") or None
    except:
        pass
    return None

def youtube_thumbnail(url: str) -> Optional[str]:
    vid = youtube_id(url)
    return f"https://img.youtube.com/vi/{vid}/hqdefault.jpg" if vid else None

def youtube_title_oembed(url: str) -> Optional[str]:
    try:
        nurl = normalize_youtube_url(url)
        r = requests.get("https://www.youtube.com/oembed",
                         params={"url": nurl, "format": "json"}, timeout=6)
        if r.ok:
            return r.json().get("title")
    except:
        pass
    return None

# -------------------- DB --------------------
def get_conn():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.execute("PRAGMA foreign_keys = ON")
    conn.execute("""
    CREATE TABLE IF NOT EXISTS videos(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      title TEXT NOT NULL,
      url   TEXT,
      instrument TEXT,
      topic TEXT,
      tags  TEXT,
      status TEXT,
      importance TEXT,
      added_at TEXT
    )""")
    conn.execute("""
    CREATE TABLE IF NOT EXISTS notes(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      video_id INTEGER NOT NULL,
      watched_on TEXT,
      timecode   TEXT,
      key_point  TEXT,
      setup      TEXT,
      context_md TEXT,  -- —Ö—Ä–∞–Ω–∏–º HTML –∏–∑ Quill
      idea_md    TEXT,  -- —Ö—Ä–∞–Ω–∏–º HTML
      notes_md   TEXT,  -- —Ö—Ä–∞–Ω–∏–º HTML
      created_at TEXT,
      updated_at TEXT,
      FOREIGN KEY(video_id) REFERENCES videos(id) ON DELETE CASCADE
    )""")
    return conn

def df_videos(conn) -> pd.DataFrame:
    return pd.read_sql_query("SELECT * FROM videos ORDER BY id DESC", conn)

def df_notes(conn, video_id: int) -> pd.DataFrame:
    return pd.read_sql_query(
        "SELECT * FROM notes WHERE video_id=? ORDER BY id DESC", conn, params=[video_id]
    )

def insert_video(conn, row: Dict[str, Any]):
    row.setdefault("added_at", datetime.utcnow().isoformat())
    cols = ",".join(row.keys()); q = ",".join("?" * len(row))
    conn.execute(f"INSERT INTO videos({cols}) VALUES({q})", list(row.values()))
    conn.commit()

def update_video(conn, vid: int, row: Dict[str, Any]):
    if not row: return
    sets = ",".join([f"{k}=?" for k in row.keys()])
    conn.execute(f"UPDATE videos SET {sets} WHERE id=?", [*row.values(), vid])
    conn.commit()

def insert_note(conn, row: Dict[str, Any]) -> int:
    now = datetime.utcnow().isoformat()
    row.setdefault("created_at", now); row.setdefault("updated_at", now)
    cols = ",".join(row.keys()); q = ",".join("?" * len(row))
    cur = conn.cursor()
    cur.execute(f"INSERT INTO notes({cols}) VALUES({q})", list(row.values()))
    conn.commit()
    return cur.lastrowid

def delete_notes_with_attachments(conn, ids: List[int]):
    if not ids: return
    for nid in ids:
        ndir = pathlib.Path(ATT_DIR) / str(int(nid))
        if ndir.exists():
            shutil.rmtree(ndir, ignore_errors=True)
    qmarks = ",".join(["?"] * len(ids))
    conn.execute(f"DELETE FROM notes WHERE id IN ({qmarks})", ids)
    conn.commit()

def delete_videos_with_attachments(conn, ids: List[int]):
    if not ids: return
    qmarks = ",".join(["?"] * len(ids))
    note_ids = pd.read_sql_query(
        f"SELECT id FROM notes WHERE video_id IN ({qmarks})",
        conn, params=ids
    )["id"].tolist()
    delete_notes_with_attachments(conn, note_ids)
    conn.execute(f"DELETE FROM videos WHERE id IN ({qmarks})", ids)
    conn.commit()

# -------------------- Pages --------------------
def page_home():
    css()
    st.title(APP_TITLE)
    st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("üè† –ì–ª–∞–≤–Ω–∞—è")
    if os.path.exists(HERO_PATH):
        st.image(HERO_PATH, use_column_width=True, caption="–¢–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü–∏—è")
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (hero.jpg –≤ –ø–∞–ø–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).")
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown("### –†–∞–∑–¥–µ–ª—ã")
    st.markdown("- **üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ** ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –∏ –º–µ—Ç–∫–∏\n"
                "- **üìù –ö–æ–Ω—Å–ø–µ–∫—Ç** ‚Äî –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã\n"
                "- **üìö –í–∏–¥–µ–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞** ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã, –ø—Ä–∞–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç\n"
                "- **üìä –î–∞—à–±–æ—Ä–¥** ‚Äî –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–µ–≤—å—é YouTube / —Ç–∞–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º\n"
                "- **‚¨áÔ∏è‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç** ‚Äî CSV")
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

def sidebar_filters_videos(df: pd.DataFrame) -> pd.DataFrame:
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã –≤–∏–¥–µ–æ")
    q = st.sidebar.text_input("–ü–æ–∏—Å–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ/—Ç–µ–≥–∏/—Ç–µ–º–∞)")
    statuses = st.sidebar.multiselect("–°—Ç–∞—Ç—É—Å", STATUS, default=STATUS)
    imps = st.sidebar.multiselect("–í–∞–∂–Ω–æ—Å—Ç—å", IMP, default=IMP)
    inst = sorted([x for x in df["instrument"].dropna().unique() if x]) if not df.empty else []
    ins = st.sidebar.multiselect("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", inst, default=inst)
    topics = sorted([x for x in df["topic"].dropna().unique() if x]) if not df.empty else []
    tsel = st.sidebar.multiselect("–¢–µ–º—ã", topics, default=topics)

    out = df.copy() if not df.empty else df
    if not df.empty:
        if q:
            out = out[
                out["title"].str.contains(q, case=False, na=False) |
                out["tags"].str.contains(q, case=False, na=False) |
                out["topic"].str.contains(q, case=False, na=False)
            ]
        if statuses: out = out[out["status"].isin(statuses)]
        if imps: out = out[out["importance"].isin(imps)]
        if ins: out = out[out["instrument"].isin(ins)]
        if tsel: out = out[out["topic"].isin(tsel)]
    st.sidebar.markdown("---")
    st.sidebar.metric("–í–∏–¥–µ–æ –≤ –≤—ã–±–æ—Ä–∫–µ", len(out))
    return out

def page_add_video(conn):
    css(); st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –∑–∞—Ä–∞–Ω–µ–µ
    st.session_state.setdefault("vid_title", "")
    st.session_state.setdefault("vid_url", "")

    # --- –í–ù–ï –§–û–†–ú–´: URL –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ---
    st.subheader("–®–∞–≥ 1: –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ")
    st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube/–º–∞—Ç–µ—Ä–∏–∞–ª", key="vid_url",
                  placeholder="https://www.youtube.com/watch?v=...")

    c1, c2 = st.columns([1,3])
    with c1:
        if st.button("üéØ –ü–æ–¥—Ç—è–Ω—É—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å YouTube"):
            url = (st.session_state.get("vid_url") or "").strip()
            if url:
                t = youtube_title_oembed(url)
                if t:
                    st.session_state["vid_title"] = t  # –º–µ–Ω—è–µ–º –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ø—É—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
                    st.success("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                    st.rerun()  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
                else:
                    st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç—è–Ω—É—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å—Å—ã–ª–∫—É.")
            else:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É.")
    with c2:
        thumb = youtube_thumbnail(st.session_state.get("vid_url", ""))
        if thumb: st.image(thumb, width=320, caption="–ü—Ä–µ–≤—å—é YouTube")

    st.markdown("---")
    st.subheader("–®–∞–≥ 2: –î–µ—Ç–∞–ª–∏ –≤–∏–¥–µ–æ")

    # --- –§–û–†–ú–ê: –ø–æ–ª—è —á–∏—Ç–∞—é—Ç —É–∂–µ –≥–æ—Ç–æ–≤—ã–π session_state ---
    with st.form("add_vid_form", clear_on_submit=False):
        col1, col2, col3 = st.columns([2,1,1])
        with col1:
            st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ*", key="vid_title", placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏–∫–∞")
            topic = st.text_input("–¢–µ–º–∞/–∫—É—Ä—Å", placeholder="Smart Money / Playlist")
        with col2:
            instrument = st.selectbox("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", INSTR, index=0)
            status     = st.selectbox("–°—Ç–∞—Ç—É—Å", STATUS, index=0)
            importance = st.selectbox("–í–∞–∂–Ω–æ—Å—Ç—å", IMP, index=1)
        with col3:
            tags = st.text_input("–¢–µ–≥–∏", placeholder="FVG, OB, BOS")
            st.caption("URL —É–∫–∞–∑–∞–Ω –≤—ã—à–µ")

        submit_add = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å", type="primary")
        if submit_add:
            title_val = (st.session_state.get("vid_title") or "").strip()
            if not title_val:
                st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
            else:
                insert_video(conn, {
                    "title": title_val,
                    "url":   (st.session_state.get("vid_url") or "").strip(),
                    "instrument": instrument.strip(),
                    "topic": topic.strip(),
                    "tags":  tags.strip(),
                    "status": status,
                    "importance": importance
                })
                st.success("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–π–¥–∏ –≤ ¬´üìù –ö–æ–Ω—Å–ø–µ–∫—Ç¬ª.")

def page_library(conn):
    css(); st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("üìö –í–∏–¥–µ–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞")

    df = df_videos(conn)
    df_view = sidebar_filters_videos(df if not df.empty else pd.DataFrame(columns=[
        "id","title","url","instrument","topic","tags","status","importance","added_at"
    ]))

    if df_view.empty:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–æ –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä—ã.")
        st.markdown('</div>', unsafe_allow_html=True); return

    df_edit = df_view.copy()
    df_edit.insert(0, "üóë —É–¥–∞–ª–∏—Ç—å?", False)

    edited = st.data_editor(
        df_edit, use_container_width=True, hide_index=True, num_rows="dynamic",
        column_config={
            "status": st.column_config.SelectboxColumn("status", options=STATUS),
            "importance": st.column_config.SelectboxColumn("importance", options=IMP),
            "instrument": st.column_config.SelectboxColumn("instrument", options=INSTR),
            "üóë —É–¥–∞–ª–∏—Ç—å?": st.column_config.CheckboxColumn("üóë —É–¥–∞–ª–∏—Ç—å?"),
        }, key="lib_editor"
    )

    c1, c2, c3, c4 = st.columns([1,1,1,2])
    with c1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∫–∏"):
            for _, r in edited.iterrows():
                update_video(conn, int(r["id"]), {
                    "title": str(r["title"]), "url": str(r["url"]),
                    "instrument": str(r["instrument"]), "topic": str(r["topic"]),
                    "tags": str(r["tags"]), "status": str(r["status"]), "importance": str(r["importance"])
                })
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    with c2:
        ids = [int(x) for x in edited.loc[edited.get("üóë —É–¥–∞–ª–∏—Ç—å?", False)==True, "id"].tolist()]
        st.button(
            f"üóë –£–¥–∞–ª–∏—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ ({len(ids)})",
            disabled=(len(ids)==0),
            on_click=lambda: (delete_videos_with_attachments(conn, ids), st.success(f"–£–¥–∞–ª–µ–Ω–æ: {len(ids)}"))
        )
    with c3:
        if not df_view.empty and isinstance(df_view.iloc[0].get("url"), str) and df_view.iloc[0]["url"]:
            st.link_button("‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å 1-–µ –≤–∏–¥–µ–æ", df_view.iloc[0]["url"])
    with c4:
        csv = df_view.to_csv(index=False).encode("utf-8")
        st.download_button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç CSV", csv, "videos_export.csv", "text/csv")

    st.markdown('</div>', unsafe_allow_html=True)

def page_notes(conn):
    css(); st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç")

    vids = df_videos(conn)
    if vids.empty:
        st.info("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –≤–∏–¥–µ–æ.")
        return

    vids["display"] = vids.apply(lambda r: f'[{r["id"]}] {r["title"]}', axis=1)
    choice = st.selectbox("–í—ã–±–µ—Ä–∏ –≤–∏–¥–µ–æ", vids["display"].tolist())
    video_id = int(choice.split("]")[0][1:])
    row = vids[vids["id"]==video_id].iloc[0]

    head1, head2 = st.columns([3,1])
    with head1:
        st.caption(f"–°—Å—ã–ª–∫–∞: {row['url'] or '‚Äî'} | –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {row['instrument'] or '‚Äî'} | –¢–µ–º–∞: {row['topic'] or '‚Äî'} | –¢–µ–≥–∏: {row['tags'] or '‚Äî'}")
    with head2:
        if row["url"]:
            st.link_button("‚ñ∂Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ", row["url"], use_container_width=True)

    # ----- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ -----
    with st.form("note_form"):
        c1, c2 = st.columns([1,1])
        with c1:
            watched_on = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", value=date.today())
            timecode   = st.text_input("–¢–∞–π–º–∫–æ–¥", "00:00")
        with c2:
            key_point  = st.text_input("–ö–ª—é—á–µ–≤–∞—è –º—ã—Å–ª—å", placeholder="–ö–æ—Ä–æ—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞")
            setup      = st.selectbox("–°–µ—Ç–∞–ø (SMC)", SETUPS, index=0)

        st.markdown("#### ‚úçÔ∏è –†–∞–∑–¥–µ–ª—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ (—à–∏—Ä–æ–∫–∏–µ/–≤—ã—Å–æ–∫–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã)")
        with st.expander("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å", expanded=True):
            context_html = st_quill(value="", placeholder="–û–ø–∏—à–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä—ã–Ω–∫–∞...",
                                    html=True, key=f"ctx_{video_id}")
        with st.expander("–ò–¥–µ—è –≤—Ö–æ–¥–∞ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å", expanded=True):
            idea_html    = st_quill(value="", placeholder="–û–ø–∏—à–∏ —Å–µ—Ç–∞–ø/–ª–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞...",
                                    html=True, key=f"idea_{video_id}")
        with st.expander("–ó–∞–º–µ—Ç–∫–∏/–¥–µ—Ç–∞–ª–∏ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å", expanded=True):
            notes_html   = st_quill(value="", placeholder="–ó–∞–º–µ—Ç–∫–∏, –≤—ã–≤–æ–¥—ã, –ø–æ–º–µ—Ç–∫–∏...",
                                    html=True, key=f"notes_{video_id}")

        files = st.file_uploader("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã (png/jpg/pdf/txt)", 
                                 type=["png","jpg","jpeg","pdf","txt"], accept_multiple_files=True)

        submit_note = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", type="primary")
        if submit_note:
            nid = insert_note(conn, {
                "video_id":  video_id,
                "watched_on": str(watched_on),
                "timecode":   timecode.strip(),
                "key_point":  key_point.strip(),
                "setup":      setup.strip(),
                "context_md": context_html or "",
                "idea_md":    idea_html or "",
                "notes_md":   notes_html or "",
            })
            note_dir = pathlib.Path(ATT_DIR) / str(nid)
            note_dir.mkdir(parents=True, exist_ok=True)
            for f in files or []:
                (note_dir / f.name).write_bytes(f.read())
            if row["status"] == "–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ":
                update_video(conn, video_id, {"status": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"})
            st.success("–ö–æ–Ω—Å–ø–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")

            # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            b1, b2 = st.columns(2)
            with b1:
                if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–æ–Ω—Å–ø–µ–∫—Ç –∫ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ"):
                    for k in (f"ctx_{video_id}", f"idea_{video_id}", f"notes_{video_id}"):
                        if k in st.session_state: del st.session_state[k]
                    st.experimental_rerun()
            with b2:
                if st.form_submit_button("‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –≤–∏–¥–µ–æ –∫–∞–∫ –∑–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ"):
                    update_video(conn, video_id, {"status": "–ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ"})
                    st.success("–í–∏–¥–µ–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
                    st.experimental_rerun()

    # ----- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∫ –±–ª–æ–∫–∏ -----
    st.markdown("### üìö –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –ø–æ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ")
    notes = df_notes(conn, video_id)
    if notes.empty:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        for _, r in notes.iterrows():
            header = f"üóì {r['watched_on'] or '‚Äî'}  |  ‚è± {r['timecode'] or '‚Äî'}  |  üí° {r['key_point'] or '‚Äî'}"
            with st.expander(header, expanded=False):
                st.markdown(f"**–°–µ—Ç–∞–ø:** `{r['setup'] or '‚Äî'}`")
                st.markdown("---")
                if r["context_md"]: st.markdown(r["context_md"], unsafe_allow_html=True)
                if r["idea_md"]:    st.markdown(r["idea_md"], unsafe_allow_html=True)
                if r["notes_md"]:   st.markdown(r["notes_md"], unsafe_allow_html=True)
                note_dir = pathlib.Path(ATT_DIR) / str(int(r["id"]))
                if note_dir.exists():
                    st.markdown("#### üìé –í–ª–æ–∂–µ–Ω–∏—è")
                    imgs, others = [], []
                    for p in sorted(note_dir.glob("*")):
                        if p.suffix.lower() in [".png",".jpg",".jpeg"]:
                            imgs.append(p)
                        else:
                            others.append(p)
                    if imgs:
                        st.image([str(p) for p in imgs], width=320, caption=[p.name for p in imgs])
                    for p in others:
                        with open(p, "rb") as fh:
                            st.download_button(f"–°–∫–∞—á–∞—Ç—å {p.name}", fh.read(), file_name=p.name, key=f"dl_{p.name}_{r['id']}")

def page_dashboard(conn):
    css(); st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("üìä –î–∞—à–±–æ—Ä–¥")

    vids = df_videos(conn)
    total_v = len(vids)
    v_not = int((vids["status"] == "–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ").sum()) if not vids.empty else 0
    v_inp = int((vids["status"] == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ").sum()) if not vids.empty else 0
    v_done = int((vids["status"] == "–ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ").sum()) if not vids.empty else 0

    cols = st.columns(4)
    cols[0].metric("–í–∏–¥–µ–æ –≤—Å–µ–≥–æ", total_v)
    cols[1].metric("–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ", v_not)
    cols[2].metric("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", v_inp)
    cols[3].metric("–ó–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ", v_done)
    if total_v: st.progress(v_done / total_v)

    st.markdown("---")
    view_mode = st.radio("–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", ["üñº –ö–∞—Ä—Ç–æ—á–∫–∏ (–∫—Ä—É–ø–Ω—ã–µ –ø—Ä–µ–≤—å—é)", "üìã –¢–∞–±–ª–∏—Ü–∞"], horizontal=True)

    if vids.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    if view_mode.startswith("üñº"):
        # --- –ë–æ–ª—å—à–∏–µ –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ ---
        st.markdown("#### –í–∏–¥–µ–æ (–∫—Ä—É–ø–Ω—ã–µ –ø—Ä–µ–≤—å—é)")
        disp = vids.copy()
        n_cols = 3
        cols_grid = st.columns(n_cols)
        for i, (_, r) in enumerate(disp.iterrows()):
            with cols_grid[i % n_cols]:
                thumb = youtube_thumbnail(r["url"]) or ""
                if thumb:
                    st.image(thumb, use_column_width=True)  # –ö–†–£–ü–ù–û
                st.markdown(f"**{r['title']}**")
                if isinstance(r["url"], str) and r["url"]:
                    st.link_button("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", r["url"], use_container_width=True)
                st.caption(f"{r['status']} ‚Ä¢ {r['importance']} ‚Ä¢ {r['instrument'] or '‚Äî'} ‚Ä¢ {r['topic'] or '‚Äî'}")
                st.markdown("---")
    else:
        # --- –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥ ---
        disp = vids.copy()
        disp["thumb"] = disp["url"].apply(lambda u: youtube_thumbnail(u) or "")
        disp["title_link"] = disp.apply(lambda r: r["url"] if isinstance(r["url"], str) and r["url"] else "", axis=1)
        disp = disp[["thumb","title","title_link","status","importance","instrument","topic"]]
        st.data_editor(
            disp, use_container_width=True, hide_index=True, disabled=True,
            column_config={
                "thumb": st.column_config.ImageColumn("–ü—Ä–µ–≤—å—é", help="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ YouTube"),
                "title": st.column_config.TextColumn("–ù–∞–∑–≤–∞–Ω–∏–µ"),
                "title_link": st.column_config.LinkColumn("‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å", display_text="–û—Ç–∫—Ä—ã—Ç—å"),
                "status": st.column_config.TextColumn("–°—Ç–∞—Ç—É—Å"),
                "importance": st.column_config.TextColumn("–í–∞–∂–Ω–æ—Å—Ç—å"),
                "instrument": st.column_config.TextColumn("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"),
                "topic": st.column_config.TextColumn("–¢–µ–º–∞"),
            },
        )

def page_import_export(conn):
    css(); st.markdown('<div class="wrap">', unsafe_allow_html=True)
    st.header("‚¨áÔ∏è‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç / –≠–∫—Å–ø–æ—Ä—Ç")

    vids = df_videos(conn)
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç CSV")
    c1, c2 = st.columns(2)
    with c1:
        if not vids.empty:
            st.download_button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –í–ò–î–ï–û (CSV)",
                               vids.to_csv(index=False).encode("utf-8"),
                               "videos_export.csv", "text/csv")
        else:
            st.caption("–ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    all_notes = pd.read_sql_query("SELECT * FROM notes ORDER BY id DESC", conn)
    with c2:
        if not all_notes.empty:
            st.download_button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ó–ê–ú–ï–¢–ö–ò (CSV)",
                               all_notes.to_csv(index=False).encode("utf-8"),
                               "notes_export.csv", "text/csv")
        else:
            st.caption("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    st.markdown("---")
    st.subheader("–ò–º–ø–æ—Ä—Ç CSV")

    upv = st.file_uploader("–ò–º–ø–æ—Ä—Ç –í–ò–î–ï–û CSV", type=["csv"], key="upv")
    if upv:
        try:
            df_in = pd.read_csv(upv)
            rename = {}
            for c in df_in.columns:
                lc = c.lower().strip()
                if lc in ["–Ω–∞–∑–≤–∞–Ω–∏–µ","title","–ª–µ–∫—Ü–∏—è","video","–ª–µ–∫—Ü–∏—è / –≤–∏–¥–µ–æ"]: rename[c] = "title"
                elif lc in ["url","—Å—Å—ã–ª–∫–∞","link"]: rename[c] = "url"
                elif lc in ["instrument","–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"]: rename[c] = "instrument"
                elif lc in ["—Ç–µ–º–∞","topic"]: rename[c] = "topic"
                elif lc in ["—Ç–µ–≥–∏","tags"]: rename[c] = "tags"
                elif lc in ["—Å—Ç–∞—Ç—É—Å","status"]: rename[c] = "status"
                elif lc in ["–≤–∞–∂–Ω–æ—Å—Ç—å","importance"]: rename[c] = "importance"
            df_in = df_in.rename(columns=rename)
            need = {"title","url","instrument","topic","tags","status","importance"}
            for m in need:
                if m not in df_in.columns: df_in[m] = ""
            for _, r in df_in.iterrows():
                insert_video(conn, {k: str(r[k]) for k in need})
            st.success(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ: {len(df_in)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–∏–¥–µ–æ: {e}")

    upn = st.file_uploader("–ò–º–ø–æ—Ä—Ç –ó–ê–ú–ï–¢–û–ö CSV (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü video_id)", type=["csv"], key="upn")
    if upn:
        try:
            df_in = pd.read_csv(upn)
            need = {"video_id","watched_on","timecode","key_point","setup","context_md","idea_md","notes_md"}
            for m in need:
                if m not in df_in.columns: df_in[m] = ""
            for _, r in df_in.iterrows():
                insert_note(conn, {k: (int(r[k]) if k=="video_id" and str(r[k]).isdigit() else str(r[k])) for k in need})
            st.success(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(df_in)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–º–µ—Ç–æ–∫: {e}")

    st.markdown('</div>', unsafe_allow_html=True)

# -------------------- App --------------------
def main():
    st.set_page_config(page_title=APP_TITLE, layout="wide")
    conn = get_conn()
    menu = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", [
        "üè† –ì–ª–∞–≤–Ω–∞—è",
        "üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ",
        "üìù –ö–æ–Ω—Å–ø–µ–∫—Ç",
        "üìö –í–∏–¥–µ–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞",
        "üìä –î–∞—à–±–æ—Ä–¥",
        "‚¨áÔ∏è‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç",
    ])
    if menu == "üè† –ì–ª–∞–≤–Ω–∞—è":             page_home()
    elif menu == "üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":    page_add_video(conn)
    elif menu == "üìù –ö–æ–Ω—Å–ø–µ–∫—Ç":          page_notes(conn)
    elif menu == "üìö –í–∏–¥–µ–æ-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞":  page_library(conn)
    elif menu == "üìä –î–∞—à–±–æ—Ä–¥":           page_dashboard(conn)
    else:                                page_import_export(conn)

if __name__ == "__main__":
    main()
